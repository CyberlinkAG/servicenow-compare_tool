<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_compare_tool.CompareAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Compare Tool API Handler&#13;
ServiceNow Customer Outcomes, Tom Hauri</description>
        <name>CompareAPI</name>
        <script><![CDATA[var CompareAPI = Class.create();
CompareAPI.prototype = {
	initialize: function (sConnectionAliasLeftId, sConnectionAliasRightId, sCompareId, oReturn) {
		this.iRemoteRecordsChunkSize = 4;
		this.sCompareId = sCompareId;
		this.oReturn = oReturn;
		this.oAttachmentCfg = {
			'sSysId': sCompareId,
			'sTable': 'x_snc_compare_tool_config'
		}; // attachment cfg
		this.sConnectionAliasLeftId = sConnectionAliasLeftId;
		this.sConnectionAliasRightId = sConnectionAliasRightId;
		this.bConnectionLeft = false;
		this.bConnectionRight = false;
		var oResult = {};
		if (this.sConnectionAliasLeftId) {
			try {
				this._gtRESTAPILeft = new global.GlobalToolsRESTAPI(this.sConnectionAliasLeftId);
				if (this._gtRESTAPILeft) {
					oResult = this._gtRESTAPILeft.testNOWConnection();
					this.bConnectionLeft = ((oResult) && (oResult.hasOwnProperty('success')) && (oResult['success'] == true)) ? true : false;
				} // if api
			} catch (oEx) {
				this._setError('remote_initialize_left', String(oEx));
				gs.error('CompareAPI.initialize Error getting remote test left: ' + String(oEx));
			} // try
		} // if alias left
		if (this.sConnectionAliasRightId) {
			try {
				this._gtRESTAPIRight = new global.GlobalToolsRESTAPI(this.sConnectionAliasRightId);
				if (this._gtRESTAPIRight) {
					oResult = this._gtRESTAPIRight.testNOWConnection();
					this.bConnectionRight = ((oResult) && (oResult.hasOwnProperty('success')) && (oResult['success'] == true)) ? true : false;
				} // if api
			} catch (oEx) {
				this._setError('remote_initialize_right', String(oEx));
				gs.error('CompareAPI.initialize Error getting remote test right: ' + String(oEx));
			} // try
		} // if alias right
		this._gt = new global.GlobalTools();
		this._gtArray = new global.GlobalToolsArray();
		this._gtObject = new global.GlobalToolsObject();
		this._gtTable = new global.GlobalToolsTable();
		this._gtRecordWrite = new global.GlobalToolsRecordWrite();
		this._gtAttachment = new global.GlobalToolsAttachment();
	}, // function initialize

	getRemoteRecordLeft: function (sTable, sQuery) {
		try {
			var iCount = this._gtRESTAPILeft.doNOWRESTCount(sTable, sQuery);
			if (iCount == 1) {
				return this._gtRESTAPILeft.getRemoteRecord(sTable, sQuery);
			} else {
				this._setError('remote_record_left_multiple');
			} // if result is one record
		} catch (oEx) {
			this._setError('remote_record_left', String(oEx));
			gs.error('CompareAPI.getRemoteRecordLeft Error getting remote record: ' + String(oEx));
		} // try
	}, // function getRemoteRecordLeft

	getRemoteRecordRight: function (sTable, sQuery) {
		try {
			var iCount = this._gtRESTAPIRight.doNOWRESTCount(sTable, sQuery);
			if (iCount == 1) {
				return this._gtRESTAPIRight.getRemoteRecord(sTable, sQuery);
			} else {
				this._setError('remote_record_right_multiple');
			} // if result is one record
		} catch (oEx) {
			this._setError('remote_record_right', String(oEx));
			gs.error('CompareAPI.getRemoteRecordRight Error getting remote record: ' + String(oEx));
		} // try
	}, // function getRemoteRecordRight

	getRemoteListLeft: function (sTable, sQuery, aKeys, aFields) {
		try {
			var aRESTAPIResult = [];
			var aAllFields = this._gtArray.mergeArray(aKeys, aFields);
			var iRemoteCount = this._gtRESTAPILeft.doNOWRESTCount(sTable, sQuery);
			if (iRemoteCount < this.iRemoteRecordsChunkSize) {
				aRESTAPIResult = this._gtRESTAPILeft.doNOWRESTQuery(sTable, sQuery, 0, this.iRemoteRecordsChunkSize, aAllFields, 'all');
			} else {
				var iOffset = 0;
				var iChunks = Math.ceil(iRemoteCount / this.iRemoteRecordsChunkSize);
				for (var i = 0; i < iChunks; i++) {
					this.oAttachmentCfg['sFilename'] = 'remote_record_' + String(i);
					this._gtRESTAPILeft.doNOWRESTQuery(sTable, sQuery, iOffset, this.iRemoteRecordsChunkSize, aAllFields, 'all', this.oAttachmentCfg);
					iOffset += this.iRemoteRecordsChunkSize;
				} // each chunk
				aRESTAPIResult = this._parseAttachment();
			} // if remote count
			return this.parseAPIResult(aRESTAPIResult, aKeys, aFields, 'left');
		} catch (oEx) {
			this._setError('remote_list_left', String(oEx));
			gs.error('CompareAPI.getRemoteListLeft Error getting remote list: ' + String(oEx));
		} // try
	}, // function getRemoteListLeft

	getRemoteListRight: function (sTable, sQuery, aKeys, aFields) {
		try {
			var aRESTAPIResult = [];
			var aAllFields = this._gtArray.mergeArray(aKeys, aFields);
			var iRemoteCount = this._gtRESTAPIRight.doNOWRESTCount(sTable, sQuery);
			if (iRemoteCount < this.iRemoteRecordsChunkSize) {
				aRESTAPIResult = this._gtRESTAPIRight.doNOWRESTQuery(sTable, sQuery, 0, this.iRemoteRecordsChunkSize, aAllFields, 'all');
			} else {
				var iOffset = 0;
				var iChunks = Math.ceil(iRemoteCount / this.iRemoteRecordsChunkSize);
				for (var i = 0; i < iChunks; i++) {
					this.oAttachmentCfg['sFilename'] = 'remote_record_' + String(i);
					this._gtRESTAPIRight.doNOWRESTQuery(sTable, sQuery, iOffset, this.iRemoteRecordsChunkSize, aAllFields, 'all', this.oAttachmentCfg);
					iOffset += this.iRemoteRecordsChunkSize;
				} // each chunk
				aRESTAPIResult = this._parseAttachment();
			} // if remote count
			return this.parseAPIResult(aRESTAPIResult, aKeys, aFields, 'right');
		} catch (oEx) {
			this._setError('remote_list_right', String(oEx));
			gs.error('CompareAPI.getRemoteListRight Error getting remote list: ' + String(oEx));
		} // try
	}, // function getRemoteListRight

	parseAPIResult: function (aRESTAPIResult, aKeys, aFields, sSource) {
		var oRESTAPIResult = {};
		var sValue = '', sDisplayValue = '';
		var _parseKeys = function (aKeys, oResult) {
			var aKeyValues = [];
			aKeys.forEach(function (sKey) {
				if ((oResult.hasOwnProperty(sKey)) && (oResult[sKey].hasOwnProperty('value'))) {
					aKeyValues.push(oResult[sKey]['value']);
				} // if value
			}, this); // each key
			return aKeyValues.join('_');
		}; // function _parseKeys
		if (this._gtArray.isValidArray(aRESTAPIResult)) {
			aRESTAPIResult.forEach(function (oResult) {
				var sKeyValue = _parseKeys(aKeys, oResult);
				aFields.forEach(function (sField) {
					sValue = this._gtObject.getValue(sField + '/value', '', oResult);
					this._gtObject.setValue(sKeyValue + '/' + sField + '/' + sSource + '/value', sValue.replace(/\r/gm, ''), oRESTAPIResult); // remove cr (13)
					sDisplayValue = this._gtObject.getValue(sField + '/display_value', '', oResult);
					if ((sDisplayValue) && (sValue != sDisplayValue)) {
						this._gtObject.setValue(sKeyValue + '/' + sField + '/' + sSource + '/display_value', sDisplayValue, oRESTAPIResult);
					} // if display value and not same as value
				}, this); // each field
			}, this); // each result
		} else {
			this._setError('parse_api');
		} // if valid array
		return oRESTAPIResult;
	}, // function parseAPIResult

	_parseAttachment: function () {
		try {
			var sResposeBody = this._gtAttachment.combineAttachments('x_snc_compare_tool_config', this.sCompareId, 'remote_record_', false, true);
			sResposeBody = sResposeBody.replace(/\]\}\n\{"result":\[/gi, ', ');
			try {
				var oResposeBody = JSON.parse(sResposeBody);
				this._gtRecordWrite.deleteMultiple('sys_attachment', 'table_name=x_snc_compare_tool_config^table_sys_id=' + this.sCompareId + '^file_nameSTARTSWITHremote_record_');
				return oResposeBody['result'];
			} catch (oEx) {
				this._setError('parse_chunks', String(oEx));
				gs.error('CompareAPI._parseAttachment Error parsing JSON: ' + String(oEx));
			} // try remote call
		} catch (oEx) {
			this._setError('parse_attach', String(oEx));
			gs.error('CompareAPI._parseAttachment Error parsing attachments: ' + String(oEx));
		} // try remote call
		this._gtRecordWrite.deleteMultiple('sys_attachment', 'table_name=x_snc_compare_tool_config^table_sys_id=' + this.sCompareId + '^file_nameSTARTSWITHremote_record_');
	}, // function _parseAttachment

	getRemoteCountLeft: function (sTable, sQuery, sGroupByField, bOrderByCount, sDisplayValue) {
		try {
			return this._gtRESTAPILeft.doNOWRESTCount(sTable, sQuery, sGroupByField, bOrderByCount, sDisplayValue);
		} catch (oEx) {
			this._setError('remote_count_left', String(oEx));
			gs.error('CompareAPI.getRemoteCountLeft Error getting remote count: ' + String(oEx));
		} // try
	}, // function getRemoteCountLeft

	getRemoteCountRight: function (sTable, sQuery, sGroupByField, bOrderByCount, sDisplayValue) {
		try {
			return this._gtRESTAPIRight.doNOWRESTCount(sTable, sQuery, sGroupByField, bOrderByCount, sDisplayValue);
		} catch (oEx) {
			this._setError('remote_count_right', String(oEx));
			gs.error('CompareAPI.getRemoteCountRight Error getting remote record: ' + String(oEx));
		} // try
	}, // function getRemoteCountRight

	getRemoteCountObjectLeft: function (sQuery) {
		var oCountResult = {};
		try {
			var sTable = '', sCount = '';
			var aRESTAPIResult = this._gtRESTAPILeft.doNOWRESTQuery('sys_db_object', sQuery, '', 5000, ['name', 'label']);
			if (this._gtArray.isValidArray(aRESTAPIResult)) {
				aRESTAPIResult.forEach(function (oRESTAPIResult) {
					sTable = this._gtObject.getValue('name', '', oRESTAPIResult);
					sCount = this.getRemoteCountLeft(sTable);
					sCount = (isNaN(sCount)) ? '-1' : sCount;
					this._gtObject.setValue(sTable + '/left/label', this._gtObject.getValue('label', '', oRESTAPIResult), oCountResult);
					this._gtObject.setValue(sTable + '/left/count', sCount, oCountResult);
				}, this); // each result
			} else {
				this._setError('parse_api');
			} // if valid array
		} catch (oEx) {
			this._setError('remote_count_object_left', String(oEx));
			gs.error('CompareAPI.getRemoteCountObjectLeft Error getting remote object: ' + String(oEx));
		} // try
		return oCountResult;
	}, // function getRemoteCountObjectRight

	getRemoteCountObjectRight: function (sQuery) {
		var oCountResult = {};
		try {
			var sTable = '', sCount = '';
			var aRESTAPIResult = this._gtRESTAPIRight.doNOWRESTQuery('sys_db_object', sQuery, '', 5000, ['name', 'label']);
			if (this._gtArray.isValidArray(aRESTAPIResult)) {
				aRESTAPIResult.forEach(function (oRESTAPIResult) {
					sTable = this._gtObject.getValue('name', '', oRESTAPIResult);
					sCount = this.getRemoteCountRight(sTable);
					sCount = (isNaN(sCount)) ? '-1' : sCount;
					this._gtObject.setValue(sTable + '/right/label', this._gtObject.getValue('label', '', oRESTAPIResult), oCountResult);
					this._gtObject.setValue(sTable + '/right/count', sCount, oCountResult);
				}, this); // each result
			} else {
				this._setError('parse_api');
			} // if valid array
		} catch (oEx) {
			this._setError('remote_count_object_right', String(oEx));
			gs.error('CompareAPI.getRemoteCountObjectRight Error getting remote object: ' + String(oEx));
		} // try
		return oCountResult;
	}, // function getRemoteCountObjectRight

	_setError: function (sMessage) {
		var aArguments = [];
		for (var i = 1; i < arguments.length; i++) {
			aArguments.push(String(arguments[i]));
		} // each argument after script and scope
		this.oReturn['bValid'] = false;
		this.oReturn['sMessage'] = gs.getMessage('CompareTool_error_' + sMessage, aArguments);
		return false;
	}, // function _setError

	type: 'CompareAPI',
	version: '1.0.0',
	author: 'Tom Hauri',
	email: 'tom@hauri.biz'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-12-14 06:42:23</sys_created_on>
        <sys_id>2f0c002e1bc73d105e14b8449b4bcb15</sys_id>
        <sys_mod_count>83</sys_mod_count>
        <sys_name>CompareAPI</sys_name>
        <sys_package display_value="Compare Tool" source="x_snc_compare_tool">0cf1f6ed1b0b79105e14b8449b4bcb5c</sys_package>
        <sys_policy/>
        <sys_scope display_value="Compare Tool">0cf1f6ed1b0b79105e14b8449b4bcb5c</sys_scope>
        <sys_update_name>sys_script_include_2f0c002e1bc73d105e14b8449b4bcb15</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-01-05 06:54:12</sys_updated_on>
    </sys_script_include>
</record_update>
